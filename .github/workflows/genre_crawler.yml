name: Genre Crawler Batch

on:
  workflow_dispatch:  # Ch·∫°y th·ªß c√¥ng khi b·∫•m "Run workflow"

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      batch_ids: ${{ steps.set-batch.outputs.batch_ids }}
    steps:
      - name: Generate batch list
        id: set-batch
        run: |
          echo 'batch_ids<<EOF' >> $GITHUB_OUTPUT
          seq 0 66 | jq -R -s 'split("\n")[:-1]' | jq -c >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

        
  scrape:
    needs: prepare  # üõë ƒê·∫£m b·∫£o ch·∫°y sau khi `prepare` ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write  # C·∫•p quy·ªÅn ghi v√†o repo
    timeout-minutes: 330  # ‚è≥ H·ªßy job n·∫øu ch·∫°y qu√° 5 gi·ªù 30 ph√∫t

    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.prepare.outputs.batch_ids) }}
      fail-fast: false  # üî• Kh√¥ng h·ªßy c√°c batch kh√°c n·∫øu m·ªôt batch b·ªã l·ªói

    steps:
      - name: Check Memory Usage
        run: free -h

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # S·ª≠ d·ª•ng token ƒë·ªÉ c√≥ quy·ªÅn push

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run genre.py for Batch ${{ matrix.batch_id }}
        run: python -u source/genre.py ${{ matrix.batch_id }} 10 || echo "Script failed, check logs."

      
      - name: Save progress to GitHub
        if: always()
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          FILE_PATH="data/vgsales_updated_${{ matrix.batch_id }}.csv"

          # üõë Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi add
          if [ ! -f "$FILE_PATH" ]; then
            echo "‚ùå Error: File $FILE_PATH not found. Exiting."
            exit 1
          fi
          
          # ‚úÖ Ki·ªÉm tra xem c√≥ thay ƒë·ªïi n√†o ch∆∞a commit kh√¥ng
          if git diff --quiet "$FILE_PATH"; then
            echo "‚ö†Ô∏è No changes detected in $FILE_PATH, skipping commit."
            exit 0
          fi
          
          # üõ†Ô∏è C·∫≠p nh·∫≠t repo v·ªõi phi√™n b·∫£n m·ªõi nh·∫•t, tr√°nh l·ªói xung ƒë·ªôt
          git pull --rebase origin master || echo "‚ö†Ô∏è Pull failed, continuing..."
          
          # ‚úÖ Ch·ªâ add file batch hi·ªán t·∫°i
          git add "$FILE_PATH"
          
          # üöÄ Commit thay ƒë·ªïi n·∫øu c√≥
          git commit -m "Batch 10 progress"
          
          # üîÑ Th·ª≠ push, n·∫øu th·∫•t b·∫°i th√¨ th·ª≠ l·∫°i nhi·ªÅu l·∫ßn v·ªõi delay random
          while true; do
            if git push origin HEAD:master; then
              echo "‚úÖ Push successful!"
              exit 0
            else
              SLEEP_TIME=$(shuf -i 1-10 -n 1)  # Random s·ªë gi√¢y t·ª´ 1-10
              echo "‚ö†Ô∏è Push failed, retrying in $SLEEP_TIME seconds..."
              sleep $SLEEP_TIME
            fi
          done


      - name: Upload CSV Progress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-progress-batch-${{ matrix.batch_id }}
          path: data/vgsales_updated_${{ matrix.batch_id }}.csv
          if-no-files-found: warn
          overwrite: true  # üî• Cho ph√©p ghi ƒë√® n·∫øu file ƒë√£ t·ªìn t·∫°i
