name: Run Full Pipeline

on:
  workflow_dispatch:  # Ch·∫°y th·ªß c√¥ng tr√™n GitHub Actions

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      batch_ids: ${{ steps.set-batch.outputs.batch_ids }}  # üî• Xu·∫•t batch_ids ƒë·ªÉ truy·ªÅn sang scrape

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate batch list
        id: set-batch
        run: |
          BATCH_IDS=$(seq 0 19 | jq -R -s 'split("\n")[:-1]' | jq -c)
          echo "Generated batch_ids: $BATCH_IDS"
          
          # üî• ƒê√∫ng c√∫ ph√°p cho GitHub Actions
          echo "batch_ids=$BATCH_IDS" >> "$GITHUB_OUTPUT"
        shell: bash

      # üèÜ Cache to√†n b·ªô m√¥i tr∆∞·ªùng Python ƒë·ªÉ d√πng l·∫°i ·ªü c√°c job sau
      - name: Cache Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip  # L∆∞u cache th∆∞ vi·ªán pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-

      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"


      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt
        
  crawl-list:
    needs: prepare  # üõë ƒê·∫£m b·∫£o ch·∫°y sau khi `prepare` ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write  # C·∫•p quy·ªÅn ghi v√†o repo
    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.prepare.outputs.batch_ids) }}  # Ch·∫°y t·ª´ng batch song song
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # S·ª≠ d·ª•ng token ƒë·ªÉ c√≥ quy·ªÅn push

      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Run Scraper for Batch ${{ matrix.batch_id }}
        run: python -u source/vgchartzfull.py ${{ matrix.batch_id }}  

      - name: Upload vgsales.csv as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-data-batch-${{ matrix.batch_id }}  # Th√™m batch_id v√†o t√™n artifact
          path: data/vgsales_batch_${{ matrix.batch_id }}.csv  # ƒê·∫£m b·∫£o t√™n file ƒë·∫ßu ra ƒë√∫ng
          if-no-files-found: error  # B√°o l·ªói n·∫øu file kh√¥ng t·ªìn t·∫°i

  merge-batches:
    needs: crawl-list
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Download all batch files
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true  # G·ªôp t·∫•t c·∫£ artifacts v√†o th∆∞ m·ª•c data/

        
        
      - name: Move CSV files to data/
        run: |
          mkdir -p data/
          find artifacts/ -type f -name "*.csv" -exec mv {} data/ \;
          ls -l data/
        

      - name: Print folder structure
        run: |
          sudo apt-get install tree -y  # C√†i ƒë·∫∑t tree n·∫øu ch∆∞a c√≥ (ch·ªâ c·∫ßn tr√™n Ubuntu)
          tree data/
  
      - name: Merge batch files
        run: python -u source/merge_batches.py

      - name: Remove batch files after merging
        run: |
          find data/ -type f -name "vgsales_batch_*.csv" -exec rm {} \;
          echo "Batch files removed after merging."

      - name: Upload final merged file
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-dataset
          path: data/vgsales.csv
          if-no-files-found: error

  scrape:
    needs: [prepare, merge-batches]  # üõë ƒê·∫£m b·∫£o ch·∫°y sau khi `prepare` ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write  # C·∫•p quy·ªÅn ghi v√†o repo
    timeout-minutes: 330  # ‚è≥ H·ªßy job n·∫øu ch·∫°y qu√° 5 gi·ªù 30 ph√∫t

    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.prepare.outputs.batch_ids) }}
      fail-fast: false  # üî• Kh√¥ng h·ªßy c√°c batch kh√°c n·∫øu m·ªôt batch b·ªã l·ªói

    steps:
      - name: Check Memory Usage
        run: free -h

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # S·ª≠ d·ª•ng token ƒë·ªÉ c√≥ quy·ªÅn push

      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Download vgsales.csv
        uses: actions/download-artifact@v4
        with:
          name: vgsales-dataset
          path: data/
  
      
      - name: Run genre.py for Batch ${{ matrix.batch_id }}
        run: python -u source/genre.py ${{ matrix.batch_id }} 3400 || echo "Script failed, check logs."
      
      
      - name: Upload CSV Progress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-progress-batch-${{ matrix.batch_id }}
          path: data/vgsales_updated_${{ matrix.batch_id }}.csv
          if-no-files-found: warn
          overwrite: true  # üî• Cho ph√©p ghi ƒë√® n·∫øu file ƒë√£ t·ªìn t·∫°i
      

  final-commit:
    needs: [prepare, scrape]  # Ch·∫°y sau khi t·∫•t c·∫£ batch ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Download all Batch Results
        uses: actions/download-artifact@v4
        with:
          path: batch-results/

      - name: List downloaded files
        run: ls -lah batch-results/

      - name: Move all CSV files to data/
        run: |
          mkdir -p data/  # ƒê·∫£m b·∫£o th∆∞ m·ª•c `data/` t·ªìn t·∫°i
          find batch-results/ -type f -name "vgsales_updated_*.csv" -exec mv {} data/ \;
          find batch-results/ -type f -name "vgsales.csv" -exec mv {} data/ \;
          ls -lah data/  # Ki·ªÉm tra sau khi di chuy·ªÉn

        
      - name: Run merge_data.py
        run: python source/merge_data.py || echo "Merge script failed, check logs."


      - name: Commit & Push Merged Data
        run: |
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git pull --rebase origin master || echo "‚ö†Ô∏è Pull failed, continuing..."
            
            git add data/vgsales_final.csv
            git rm -rf data/vgsales_updated_*.csv || echo "‚ö†Ô∏è No batch files to delete."
            
            if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected, skipping commit."
            else
            git commit -m "Updated merged vgsales data"
            git push origin master
            fi
