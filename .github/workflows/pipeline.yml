name: Run Full Pipeline

on:
  workflow_dispatch:  # Ch·∫°y th·ªß c√¥ng tr√™n GitHub Actions

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      batch_ids: ${{ steps.set-batch.outputs.batch_ids }}  # üî• Xu·∫•t batch_ids ƒë·ªÉ truy·ªÅn sang scrape

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Generate batch list
        id: set-batch
        run: |
          BATCH_IDS=$(seq 0 19 | jq -R -s 'split("\n")[:-1]' | jq -c)
          echo "Generated batch_ids: $BATCH_IDS"
          
          # üî• ƒê√∫ng c√∫ ph√°p cho GitHub Actions
          echo "batch_ids=$BATCH_IDS" >> "$GITHUB_OUTPUT"
        shell: bash

      # üèÜ Cache to√†n b·ªô m√¥i tr∆∞·ªùng Python ƒë·ªÉ d√πng l·∫°i ·ªü c√°c job sau
      - name: Cache Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip  # L∆∞u cache th∆∞ vi·ªán pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-

      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"


      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt
        
  crawl-list:
    needs: prepare  # üõë ƒê·∫£m b·∫£o ch·∫°y sau khi `prepare` ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write  # C·∫•p quy·ªÅn ghi v√†o repo
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # S·ª≠ d·ª•ng token ƒë·ªÉ c√≥ quy·ªÅn push

      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

          
      - name: Run VGChartz Full Scraper
        run: python -u source/vgchartzfull.py || echo "Script failed, check logs."

      - name: Commit & Push Scraped Data
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          git add .
          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected, skipping commit."
          else
            git commit -m "Updated VGChartz full scraped data"
            git push origin master || (echo "‚ö†Ô∏è Push failed, retrying..." && sleep 10 && git push origin master)
          fi

      # üìå L∆∞u file vgsales.csv v√†o artifact ƒë·ªÉ d√πng trong job scrape
      - name: Upload vgsales.csv as artifact
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-data
          path: data/vgsales.csv
          if-no-files-found: error  # B√°o l·ªói n·∫øu file kh√¥ng t·ªìn t·∫°i

  scrape:
    needs: [prepare, crawl-list]  # üõë ƒê·∫£m b·∫£o ch·∫°y sau khi `prepare` ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write  # C·∫•p quy·ªÅn ghi v√†o repo
    timeout-minutes: 330  # ‚è≥ H·ªßy job n·∫øu ch·∫°y qu√° 5 gi·ªù 30 ph√∫t

    strategy:
      matrix:
        batch_id: ${{ fromJson(needs.prepare.outputs.batch_ids) }}
      fail-fast: false  # üî• Kh√¥ng h·ªßy c√°c batch kh√°c n·∫øu m·ªôt batch b·ªã l·ªói

    steps:
      - name: Check Memory Usage
        run: free -h

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}  # S·ª≠ d·ª•ng token ƒë·ªÉ c√≥ quy·ªÅn push

      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Ensure vgsales.csv exists, otherwise pull latest data
        run: |
          FILE_PATH="data/vgsales.csv"

          if [ ! -f "$FILE_PATH" ]; then
            echo "‚ö†Ô∏è $FILE_PATH not found! Pulling latest data..."
            
            # üõ†Ô∏è Th·ª≠ pull t·ª´ GitHub repo
            git pull origin master || echo "‚ö†Ô∏è Pull failed, checking artifact..."

            # üîÑ N·∫øu v·∫´n kh√¥ng c√≥, th·ª≠ t·∫£i t·ª´ artifact
            if [ ! -f "$FILE_PATH" ]; then
              echo "‚ö†Ô∏è File still missing! Trying to download from artifact..."
              gh run download -n vgsales-data --dir data/ || echo "‚ö†Ô∏è Artifact not found, skipping..."
            fi
          else
            echo "‚úÖ $FILE_PATH already exists, skipping pull."
          fi

      
      - name: Run genre.py for Batch ${{ matrix.batch_id }}
        run: python -u source/genre.py ${{ matrix.batch_id }} 3302 || echo "Script failed, check logs."
      
      
      - name: Upload CSV Progress
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vgsales-progress-batch-${{ matrix.batch_id }}
          path: data/vgsales_updated_${{ matrix.batch_id }}.csv
          if-no-files-found: warn
          overwrite: true  # üî• Cho ph√©p ghi ƒë√® n·∫øu file ƒë√£ t·ªìn t·∫°i

  extract-csv:
    needs: [prepare, scrape]  # Ch·∫°y sau khi t·∫•t c·∫£ batch ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Download all Batch Results
        uses: actions/download-artifact@v4
        with:
          path: batch-results/

      - name: List downloaded files
        run: ls -lah batch-results/

      - name: Move all CSV files to data/
        run: |
          mkdir -p data/  # ƒê·∫£m b·∫£o th∆∞ m·ª•c `data/` t·ªìn t·∫°i
          find batch-results/ -type f -name "vgsales_updated_*.csv" -exec mv {} data/ \;
          ls -lah data/  # Ki·ªÉm tra sau khi di chuy·ªÉn

      - name: Commit & Push all Batch Updates
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          # üõ†Ô∏è C·∫≠p nh·∫≠t repo v·ªõi phi√™n b·∫£n m·ªõi nh·∫•t
          git pull --rebase origin master || echo "‚ö†Ô∏è Pull failed, continuing..."

          # ‚úÖ Ch·ªâ add file .csv trong `data/`, b·ªè qua th∆∞ m·ª•c kh√°c
          git add data/*.csv || echo "‚ö†Ô∏è No CSV files to add."

          # üõë Ki·ªÉm tra xem c√≥ thay ƒë·ªïi n√†o ch∆∞a commit kh√¥ng
          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected, skipping commit."
            exit 0
          fi

          # üöÄ Commit t·∫•t c·∫£ file CSV c√πng m·ªôt l√∫c
          git commit -m "üî• Updated all batch CSV files"

          # üîÑ Th·ª≠ push, n·∫øu th·∫•t b·∫°i th√¨ th·ª≠ l·∫°i nhi·ªÅu l·∫ßn v·ªõi delay random
          while true; do
            if git push origin master; then
              echo "‚úÖ Push successful!"
              exit 0
            else
              SLEEP_TIME=$(shuf -i 1-10 -n 1)  # Random s·ªë gi√¢y t·ª´ 1-10
              echo "‚ö†Ô∏è Push failed, retrying in $SLEEP_TIME seconds..."
              sleep $SLEEP_TIME
              git pull --rebase origin master || echo "‚ö†Ô∏è Pull failed, continuing..."
            fi
          done

  final-commit:
    needs: [prepare, extract-csv]  # Ch·∫°y sau khi t·∫•t c·∫£ batch ho√†n th√†nh
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # ‚úÖ D√πng l·∫°i cache Python t·ª´ `prepare`
      - name: Restore Python environment
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            python-${{ runner.os }}-
            
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies (if not cached)
        run: pip install -r requirements.txt

      - name: Ensure latest update, otherwise pull latest data
        run: |
          git pull origin master || echo "‚ö†Ô∏è Pull failed, checking artifact..."
        
      - name: Run merge_data.py
        run: python source/merge_data.py || echo "Merge script failed, check logs."


      - name: Commit & Push Merged Data
        run: |
            git config --global user.name "github-actions"
            git config --global user.email "actions@github.com"
            git pull --rebase origin master || echo "‚ö†Ô∏è Pull failed, continuing..."
            
            git add data/vgsales_final.csv
            git rm -rf data/vgsales_updated_*.csv || echo "‚ö†Ô∏è No batch files to delete."
            
            if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected, skipping commit."
            else
            git commit -m "Updated merged vgsales data"
            git push origin master
            fi
